{%- macro PeriodPrice(mySensor_today,
                      earliestDatetime=null, latestDatetime=null,
                      durationTimedelta=timedelta(minutes=60),
                      returnFirstBool=true,
                      timeAdherenceStr="default",
                      attr_today_arr="raw_today",
                      attr_tomorrow_arr="raw_tomorrow",
                      mySensor_tomorrow = mySensor_today,
                      attr_forecast_arr="forecast",
                      mySensor_forecast = mySensor_today,
                      timeTagStr="hour",
                      priceTagStr="price",
                      defaultDurationMinNum=30,
                      defaultPeriodHrsNum=48,
                      mode="default",
                      hint="",
                      usageWindow=60,
                      kwh_usage=[]
                    ) -%}

  {#-####################################################################-#}
  {#-
    Note that makro can be called adding just the mySensor_today parameter. Any parameter can be added in any order
    providing that it is written using the parameter name. When leaving out parameters, this is mandatory to ensure
    correct parsing. E.g. {{- PeriodPrice("sensor.edssensor", durationTimedelta=timedelta(minutes=90)) -}} 

    Required = *
    * mySensor_today        (String) Name of the sensor (EDS or any similar type of sensor) that contains pricing data
    edsearliestDatetime     (DateTime) Exact date/time of start of window during which electricity will be used
    latestDatetime          (DateTime) Exact date/time of end of window during which electricity will be used
    durationTimedelta       (TimeDelta) Duration of electricity usage formatted as a TimeDelta
    returnFirstBool         (Boolean) Default to true to use first occurrence of the lowest price, otherwise use the last
    timeAdherenceStr        (String) Influences the behaviour when seeking low / high cost
                            - default = adjusts time to 'now' if time is in the past
                            - strict  = do not adjust time and return empty result if window is in the past
                            - forced  = do not adjust time and return result even if window is in the past
    attr_today_arr          (String) Name of attribute for today data - organized in pairs of time + price
    attr_tomorrow_arr       (String) Name of attribute for tomoows data (if any) - organized in pairs of time + price
    attr_forecast_arr       (String) Name of attribute for forecast data after tomorrow (if any) - organized in pairs of time + price
    timeTagStr              (String) Name attribute (in the pair) containng the time
    priceTagStr             (String) Name attribute (in the pair) containng the price
    defaultDurationMinNum   (Number) Default minimum duration of a 
    defaultPeriodHrsNum     (Number) The default duration of hour to look for cheapest prices
    mode                    full / 
                            cheapPrice / cheapStart / cheapStart / isCheapNow
                            expensivePrice / expensiveStart / expensiveStart / isExpensiveNow
    hint                    String to be returned as part of the result. This could (e.g.) be the name of the integration providing data
    usageWindow             Number (1-60) of minutes of the length of each the each of kwh_usage items
    kwh_usage               Either a List [] of numbers  or a single number. This is a representation of the expected kWh used. 

    Macro returns a STRING(!) based on the MODE setting
    mode = full
      String that must be converted using the from_json filter. The JSON can contain following:
        * cheapPriceStartTime      Datetime string of when cheapest time starts
        * cheapPriceEndTime        Datetime string of when cheapest time ends
        cheapPrice                 Price if 1 kW is used each hour during cheapest time. None if no leftInPriceWindow found
        * expensivePriceStartTime  Datetime string of when most expensive time starts
        * expensivePriceEndTime    Datetime string of when most expensive time ends
        expensivePrice             Price if 1 kW is used each hour during most expensive time. None if no leftInPriceWindow found
        earliestDatetime           Datetime string of the earliest time used when looking for cheap / expensive
        latestDatetime             Datetime string of the latest time used when looking for cheap / expensive
        duration                   The duration of the time window looked for (in minutes)
        isCheapNow                 none if no cheap time leftInPriceWindow found, otherwise true / false dependent on whether right now is the cheapest leftInPriceWindow 
        isExpensiveNow             none if no expensive time leftInPriceWindow found, otherwise true / false dependent on whether right now is the most expensive leftInPriceWindow
        hint                       none or string as provided when  macro was called 
        status                     Status of the call
        * = only included if a corresponding leftInPriceWindow was found
    mode = cheapPrice
      String value of price if 1 kW is used each hour during cheapest time. None if no leftInPriceWindow found
    mode = cheapStart
      Datetime string of when cheapest time starts
    mode = cheapEnd
      Datetime string of when cheapest time ends
    mode = expensivePrice
      String value of price if 1 kW is used each hour during most expensive time. None if no leftInPriceWindow found
    mode = expensiveStart
      Datetime string of when most expensive time starts
    mode = expensiveEnd
      Datetime string of when most expensive time ends
  -#}

  {#-####################################################################-#}
  {#- Prepare input parameters -#}

  {#- Blank out unwanted date sets. Order is today -> tomorrow -> forecast. If a set is blanked out, subsequent set(s) are also be blanked out -#}
  {%- if attr_today_arr=="" -%}
    {%- set attr_tomorrow_arr = "" -%}
    {%- set mySensor_tomorrow = "" -%}
  {%- endif -%}
  {%- if attr_tomorrow_arr=="" -%}
    {%- set attr_forecast_arr = "" -%}
    {%- set mySensor_forecast = "" -%}
  {%- endif -%}
  
  {#- Retrieve energy prices -#}
  {%- set prices        = ( state_attr(mySensor_today, attr_today_arr) or []) +
                           (state_attr(mySensor_tomorrow, attr_tomorrow_arr) or []) +
                           (state_attr(mySensor_forecast, attr_forecast_arr) or []) -%}
  {%- set prices_len = prices | length -%}

  {%- if prices == [] %} 
    {%- set status="noPrices" -%}
  {%- else -%}
    {%- if timeTagStr not in prices[0] or priceTagStr not in prices[0] -%}
      {%- set prices=[] -%}
      {%- set prices_len = 0 -%}
      {%- set status="incorrectTagsProvided" -%}   
    {%- else -%}
      {%- if usageWindow is not number or (usageWindow > 60) or (usageWindow<1) or (usageWindow != usageWindow | int(0)) -%}
        {%- set status="invalidUsageWindow" -%}
      {%- else -%}
        {%- set status = "ok" -%}
        {%- set usageWindow = usageWindow if usageWindow is defined and usageWindow is number else 60 -%}
      {%- endif -%}

      {%- if prices | length >= 2 -%}
        {%- set priceWindow = ((prices[1][timeTagStr] | as_datetime - prices[0][timeTagStr] | as_datetime).total_seconds() / 60) | int(60) -%}
      {%- else -%}
        {%- set priceWindow = 60 -%}
      {%- endif -%}
    {%- endif -%}
  {%- endif -%}

  {#- Validate and set durationTimedelta -#}
  {%- set minDuration            = defaultDurationMinNum if defaultDuration is number else 30 -%}
  {%- set durationTimedelta      = timedelta(minutes=minDuration) if durationTimedelta is not defined or durationTimedelta < timedelta(minutes=minDuration) else durationTimedelta -%}
  {%- set durationMinutes        = durationTimedelta.total_seconds() | int(minDuration * priceWindow) // 60 -%}
  {%- set durationMinutesResidual= durationMinutes % priceWindow -%}
  {%- set durationUnits          = ((durationMinutes // priceWindow) + (1 if durationMinutesResidual > 0 else 0)) | int -%}

  {%- if status=="ok" -%}
    {%- set reqUsageSlices = (1 if durationMinutes % usageWindow != 0 else 0) -%}
    {#- Build a khw_usage list if a number is provided instead of a list -#}
    {%- if kwh_usage is not sequence and kwh_usage is number -%}
      {%- set tmp = (kwh_usage / durationMinutes) * usageWindow -%}
      {%- set tmpSet = namespace(dict = []) -%}  
      {%- for i in range((durationMinutes // usageWindow) | int) -%}
        {%- set tmpSet.dict = tmpSet.dict + [tmp] -%}
      {%- endfor -%}
      {%- set tmpSet.dict = tmpSet.dict + [(kwh_usage - tmpSet.dict|sum) * (0 if durationMinutes % usageWindow == 0 else (usageWindow / (durationMinutes % usageWindow))) ] -%}
      {%- set kwh_usage = tmpSet.dict -%}
    {%- endif -%}
    {%- set reqUsageSlices = reqUsageSlices + (durationMinutes // usageWindow) -%}
    {%- set usageLen = kwh_usage | length if kwh_usage is sequence and kwh_usage is not string else 0 -%} 
    {%- if usageLen==0 -%}
      {%- set kwh_usage=[] -%}
      {%- set usageWindow = 60 -%}
    {%- elif usageLen>reqUsageSlices -%}
      {%- set kwh_usage=kwh_usage[:reqUsageSlices] -%}
    {%- elif usageLen<reqUsageSlices -%}
      {%- set status="notEnoughKwhPoints" -%}
    {%- endif -%}
  {%- endif -%}

  {%- set arrSize    = prices | length -%}
  {%- set prices_len = arrSize - durationUnits | int + 1 -%}
  
  {%- set timeAdherenceStr       = timeAdherenceStr | lower %}
  {%- if timeAdherenceStr not in ("default", "strict", "forced") %}
    {%- set timeAdherenceStr = "default" -%}
  {%- endif -%}
  {%- set nowTime                = now() if timeAdherenceStr not in ("strict", "forced") else earliestDatetime -%}

  {#-###################################-#}
  {#- Validate and set earliestDatetime -#}
  {%- set earliestDatetime       = nowTime if earliestDatetime is not defined or earliestDatetime is not datetime or (earliestDatetime < nowTime) else earliestDatetime -%}
  {#- Strip microseconds and seconds from time -#}
  {%- set earliestDatetime       = earliestDatetime - timedelta(microseconds=earliestDatetime.microsecond, seconds=earliestDatetime.second) -%}
  {%- set earliestDatetimeMinute = earliestDatetime.minute -%}

  {#-###################################-#}
  {#- Validate and set latestDatetime -#}
  {%- set defPeriodeHours        = defaultPeriodHrsNum if defaultPeriodHrsNum is number else 48 -%}
  {%- set latestDatetime         = nowTime + timedelta(hours=defPeriodeHours) if latestDatetime is not defined or latestDatetime is not datetime or latestDatetime < earliestDatetime else latestDatetime -%}
  {#- Strip microseconds from time -#}
  {%- set latestDatetime         = latestDatetime - timedelta(microseconds=latestDatetime.microsecond) -%}
  {%- set latestDatetimeMinut    = latestDatetime.minute -%}
  {%- set latestDatetime         = latestDatetime + timedelta(minutes=0 if latestDatetimeMinut == 0 else (priceWindow-latestDatetimeMinut)% priceWindow, seconds=-latestDatetime.second) -%}
  {#- 
     Extend latestDatetime in case a duration is provided that exceeds the provided latestDatetime
     Note: latestDatetime is only extended by as many minutes as the window is exceeded with
  -#}
  {%- set durationDiff           = durationMinutes - (latestDatetime - earliestDatetime).total_seconds() // priceWindow -%}
  {%- set durationDiff           = 0 if durationDiff < 0 else durationDiff -%}
  {%- set latestDatetime         = latestDatetime + timedelta(minutes=0 if durationDiff <= 0 else durationDiff) -%}
  {#%- set latestDatetimeComp     = (latestDatetime - timedelta(hours=durationUnits + (1 if durationMinutesResidual > 0 else 0))) -%#}
  {%- set mode                   = mode | lower -%}
 
  {%- if mode not in (
                        "default", "details",
                        "cheapprice", "cheapstart", "cheapend", "ischeapnow", 
                        "expensiveprice", "expensivestart", "expensiveend", "isexpensivenow"
                      ) -%}
    {%- set mode = "default" -%}
  {%- endif -%}

  {%- if status == "ok" %}
    {#- If, under 'strict' time adherence, where the provided latestDatetime is in the past, return an error -#}
    {%- set validTime = (timeAdherenceStr != "strict") or ( (timeAdherenceStr == "strict") and (latestDatetime >= now()) ) -%} 
    {%- if not validTime -%} 
      {%- set status="windowInPast" %}
    {%- endif -%}
  {%- endif -%}
  
  {#-####################################################################-#}
  {#- Set result name spaces -#}
  {%- set resultCheap     = namespace(pricing=99999999, priceStartTime=None, window=[]) -%}
  {%- set resultExpensive = namespace(pricing=0,    priceStartTime=None, window=[]) -%}

  {#-####################################################################-#}
  {#- Only run if we have price data and no error so far -#}
  {%- if prices_len > 0 and status=="ok" -%}
    {#- Do not allow latestDatetime to be after last price available - makes no sense -#}
    {%- set tmp = prices[arrSize-1][timeTagStr] | as_datetime + timedelta(minutes=priceWindow) -%}
    {%- if latestDatetime > tmp -%}
      {%- set latestDatetime = tmp -%}
    {%- endif -%}

    {#-####################################################################-#}
    {#-
       Calculate cheapest leftInPriceWindow for the current hour and all consecutive hours
       Note: This will take the current hour into account thus providingg a calculation for now() + duration,
             as well at calculation placed at the end of a hour
    -#}
    {#- Loop all timeslot where a pricing exists -#}
    {%- set loopSet = [0] -%}
    {%- if durationMinutesResidual != 0 -%}
      {%- set tmpVal = priceWindow - durationMinutesResidual -%}
      {%- set loopSet = loopSet + ([] if tmpVal in loopSet else [tmpVal]) -%}
    {%- endif -%}
    
    {%- set priceSet          = namespace( idx=0, size=priceWindow, left=0 ) -%}
    {%- set sliceSet          = namespace( idx=0, size=usageWindow, left=0 ) -%}

    {%- set totalLen          = namespace(value=0) -%}
    {%- set timeSet           = namespace(dict=[]) -%}
    {%- set pricing           = namespace(value=0) -%}

    {%- for n in range(prices_len) if (n+1==arrSize or earliestDatetime <= prices[n+1][timeTagStr] | as_datetime) and (prices[n][timeTagStr] | as_datetime + timedelta(minutes=priceWindow) <= latestDatetime) -%}
      {#- Calculat pricing on the hour, at the current minute number as well as at the end of an hour -#}
      {%- if (earliestDatetime - timedelta(minutes=earliestDatetimeMinute)) == prices[n][timeTagStr] -%}
        {%- set tmpVal = earliestDatetimeMinute % priceWindow -%}
        {%- set loopSet = loopSet + ([] if tmpVal in loopSet else [tmpVal]) -%}
      {%- endif -%}

      {#- Iterate through the possible minute sets -#}
      {%- for v in range(loopSet | length) -%}
        {%- set priceStartTime      = prices[n][timeTagStr] | as_datetime + timedelta(minutes=loopSet[v]) -%}
        {%- if earliestDatetime <= priceStartTime -%}
          {%- set priceSet.idx      = n -%}
          {%- set priceSet.left     = min(priceWindow-loopSet[v], durationMinutes) -%}
          {%- set sliceSet.idx      = 0 -%}
          {%- set sliceSet.left     = usageWindow -%}
          
          {%- set totalLen.value    = 0 -%}
          {%- set timeSet.dict      = [] -%}
          {%- set pricing.value     = 0 -%}

          {%- for i in range(reqUsageSlices * (arrSize+2)) if (totalLen.value<durationMinutes) and (usageLen == 0 or sliceSet.idx < kwh_usage | length) and priceSet.idx < arrSize -%}
            {%- set workLen         = min(priceSet.left, sliceSet.left, durationMinutes - totalLen.value ) -%}
            {%- set kwh             = 1 if usageLen == 0 else kwh_usage[sliceSet.idx] -%}
            {%- set priceFactor     = kwh * workLen / usageWindow -%}
            {%- set kwh_price       = prices[priceSet.idx][priceTagStr] -%}
            {%- set pricing.value   = pricing.value + kwh_price * priceFactor -%}
            {%- set timeValue       = priceStartTime + timedelta(minutes=totalLen.value) -%}
            {%- set timeSet.dict    = timeSet.dict + [ dict(start=timeValue | string, minutes=workLen, kWh_price=kwh_price, est_kWh=priceFactor | round(6) ) ] -%}
            
            {%- set priceSet.left   = priceSet.left - workLen -%}
            {%- if priceSet.left == 0 -%}
              {%- set priceSet.left = priceWindow -%}
              {%- set priceSet.idx  = priceSet.idx + 1 -%}
            {%- endif  -%}
            
            {%- set sliceSet.left   = sliceSet.left - workLen -%}
            {%- if sliceSet.left == 0 -%}
              {%- set sliceSet.left = usageWindow -%}
              {%- set sliceSet.idx  = sliceSet.idx + 1 -%}
            {%- endif  -%}

            {%- set totalLen.value=totalLen.value + workLen -%}
          {%- endfor -%}
          {#-####################################################################-#}
          {%- if (pricing.value<resultCheap.pricing or
                 (returnFirstBool and pricing.value<=resultCheap.pricing and (resultCheap.priceStartTime is none or priceStartTime<resultCheap.priceStartTime)) or
                 (not returnFirstBool and pricing.value<=resultCheap.pricing and (resultCheap.priceStartTime is none or priceStartTime>resultCheap.priceStartTime))
                 ) and (priceStartTime + timedelta(minutes=durationMinutes) <= latestDatetime) -%}
            {%- set resultCheap.pricing        = pricing.value -%}
            {%- set resultCheap.priceStartTime = priceStartTime -%}
            {%- set resultCheap.window         = timeSet.dict -%}
          {%- endif -%}
          {%- if (pricing.value>resultExpensive.pricing or
                 (returnFirstBool and pricing.value>=resultExpensive.pricing and (resultExpensive.priceStartTime is none or priceStartTime<resultExpensive.priceStartTime)) or
                 (not returnFirstBool and pricing.value>=resultExpensive.pricing and (resultExpensive.priceStartTime is none or priceStartTime>resultExpensive.priceStartTime))
                 ) and (priceStartTime + timedelta(minutes=durationMinutes) <= latestDatetime) -%}
            {%- set resultExpensive.pricing        = pricing.value -%}
            {%- set resultExpensive.priceStartTime = priceStartTime -%}
            {%- set resultExpensive.window         = timeSet.dict -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
    {%- endfor -%}
  {%- endif -%}

  {#-####################################################################-#}
  {#- Output result as a string formatted as JSON - this can then be parsed by whatever called the macro -#}
  {%- set FinalCheapDict     = dict(cheapPrice=none)     if resultCheap.pricing     == 9999 or resultCheap.priceStartTime    ==None else dict(cheapPriceStartTime    =resultCheap.priceStartTime    |string, cheapPrice    =resultCheap.pricing    |round(6)) -%}
  {%- set FinalExpensiveDict = dict(expensivePrice=none) if resultExpensive.pricing == 9999 or resultExpensive.priceStartTime==None else dict(expensivePriceStartTime=resultExpensive.priceStartTime|string, expensivePrice=resultExpensive.pricing|round(6)) -%}
  {%- if (FinalCheapDict.cheapPrice is none or FinalExpensiveDict.expensivePrice is none) and status=="ok" -%}
    {%- set status="noWindowFound" -%}
  {%- endif -%}
  
  {%- set result = dict(status=status,
                        **(dict() if hint == "" else dict(hint = hint))) -%}
  {%- set result = result if mode != "details" else
                    dict( cheapWindow=resultCheap.window,
                          expensiveWindow=resultExpensive.window,
                          pricingWindow   = priceWindow | int,
                          usageWindow     = usageWindow | int,
                          **result) -%}
  {%- set result = dict(earliestDatetime= earliestDatetime|string, 
                        latestDatetime  = latestDatetime|string, 
                        duration        = durationMinutes|int,
                        isCheapNow      = none if FinalCheapDict.cheapPrice        ==none else now() | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M') == FinalCheapDict.cheapPriceStartTime         | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M'),
                        isExpensiveNow  = none if FinalExpensiveDict.expensivePrice==none else now() | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M') == FinalExpensiveDict.expensivePriceStartTime | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M'),
                        mode            = mode,
                        **result) -%}
  {%- set result = dict(FinalCheapDict | items | list +
                        FinalExpensiveDict | items | list,
                       **result) -%}  

  {%- if mode == "cheapprice" -%}
    {{- result.cheapPrice -}}
  {%- elif mode == "cheapstart" -%}
    {{- result.cheapPriceStartTime  | as_datetime if result.cheapPrice != none else none -}}
  {%- elif mode == "cheapend" -%}
    {{- (result.cheapPriceStartTime | as_datetime + timedelta(minutes=result.duration)) if result.cheapPrice != none else none -}}
  {%- elif mode == "ischeapnow" -%}
    {{- result.isCheapNow -}}
  {%- elif mode == "expensiveprice" -%}
    {{- result.expensivePrice -}}
  {%- elif mode == "expensivestart" -%}
    {{- result.expensivePriceStartTime  | as_datetime if result.expensivePrice != none else none -}}
  {%- elif mode == "expensiveend" -%}
    {{- (result.expensivePriceStartTime | as_datetime + timedelta(minutes=result.duration)) if result.expensivePrice != none else none -}}
  {%- elif mode == "isexpensivenow" -%}
    {{- result.isExpensiveNow -}}
  {%- else -%}
    {{- result | to_json -}}
  {%- endif -%}
{%- endmacro -%}
