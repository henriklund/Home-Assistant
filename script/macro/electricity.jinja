{%- macro PeriodPrice(mySensor_today,
                      earliestDatetime=null, latestDatetime=null,
                      durationTimedelta=timedelta(minutes=60),
                      returnFirstBool=true,
                      timeAdherenceStr="default",
                      attr_today_arr="raw_today",
                      attr_tomorrow_arr="raw_tomorrow",
                      mySensor_tomorrow = mySensor_today,
                      attr_forecast_arr="forecast",
                      mySensor_forecast = mySensor_today,
                      timeTagStr="hour",
                      priceTagStr="price",
                      defaultDurationMinNum=30,
                      defaultPeriodHrsNum=48,
                      mode="full",
                      hint=""
                    ) -%}

  {#-####################################################################-#}
  {#-
    Note that makro can be called adding just the mySensor_today parameter. Any paramater can be added in any order
    providing that it is written using the parameter name. When leaving out paramters, this is mandatory to ensure
    correct parsing. E.g. {{- PeriodPrice("sensor.edssensor", durationTimedelta=timedelta(minutes=90)) -}} 

    Required = *
    * mySensor_today              (String) Name of the sensor (EDS or any similar type of sensor) that contains pricing data
    edsearliestDatetime     (DateTime) Exact date/time of start of window during which electricity will be used
    latestDatetime          (DateTime) Exact date/time of end of window during which electricity will be used
    durationTimedelta       (TimeDelta) Duration of electricity usage formatted as a TimeDelta
    returnFirstBool         (Boolean) Default to true to use first occurrence of the lowest price, otherwise use the last
    timeAdherenceStr        (String) Influences the behaviour when seeking low / high cost
                            - default = adjusts time to 'now' if time is in the past
                            - strict  = do not adjust time and return empty result if window is in the past
                            - forced  = do not adjust time and return result even if window is in the past
    attr_today_arr          (String) Name of attribute for today data - organized in pairs of time + price
    attr_tomorrow_arr       (String) Name of attribute for tomoows data (if any) - organized in pairs of time + price
    attr_forecast_arr       (String) Name of attribute for forecast data after tomorrow (if any) - organized in pairs of time + price
    timeTagStr              (String) Name attribute (in the pair) containng the time
    priceTagStr             (String) Name attribute (in the pair) containng the price
    defaultDurationMinNum   (Number) Default minimum duration of a 
    defaultPeriodHrsNum     (Number) The default duration of hour to look for cheapest prices
    mode                    full / 
                            cheapPrice / cheapStart / cheapStart / isCheapNow
                            expensivePrice / expensiveStart / expensiveStart / isExpensiveNow
    hint                    String to be returned as part of the result. This could (e.g.) be the name of the integration providing data

    Macro returns a STRING(!) based on the MODE setting
    mode = full
      String that must be converted using the from_json filter. The JSON can contain following:
        * cheapPriceStartTime      Datetime string of when cheapest time starts
        * cheapPriceEndTime        Datetime string of when cheapest time ends
        cheapPrice                 Price if 1 kW is used each hour during cheapest time. None if no period found
        * expensivePriceStartTime  Datetime string of when most expensive time starts
        * expensivePriceEndTime    Datetime string of when most expensive time ends
        expensivePrice             Price if 1 kW is used each hour during most expensive time. None if no period found
        earliestDatetime           Datetime string of the earliest time used when looking for cheap / expensive
        latestDatetime             Datetime string of the latest time used when looking for cheap / expensive
        duration                   The duration of the time window looked for (in minutes)
        isCheapNow                 none if no cheap time period found, otherwise true / false dependent on whether right now is the cheapest period 
        isExpensiveNow             none if no expensive time period found, otherwise true / false dependent on whether right now is the most expensive period
        hint                       none or string as provided when  macro was called 
        * = only included if a corresponding period was found
    mode = cheapPrice
      String value of price if 1 kW is used each hour during cheapest time. None if no period found
    mode = cheapStart
      Datetime string of when cheapest time starts
    mode = cheapEnd
      Datetime string of when cheapest time ends
    mode = expensivePrice
      String value of price if 1 kW is used each hour during most expensive time. None if no period found
    mode = expensiveStart
      Datetime string of when most expensive time starts
    mode = expensiveEnd
      Datetime string of when most expensive time ends
  -#}

  {#-####################################################################-#}
  {#- Prepare input parameters -#}
  {%- set timeAdherenceStr       = timeAdherenceStr | lower %}
  {%- if timeAdherenceStr not in ("default", "strict", "forced") %}
      {% set timeAdherenceStr = "default" %}
  {% endif %}
  {%- set nowTime                = now() if timeAdherenceStr not in ("strict", "forced") else earliestDatetime -%}
 
  {#-###################################-#}
  {#- Validate and set earliestDatetime -#}
  {%- set earliestDatetime       = nowTime if earliestDatetime is not defined or earliestDatetime is not datetime or (earliestDatetime < nowTime) else earliestDatetime -%}
  {#- Strip microseconds from time -#}
  {%- set earliestDatetime       = earliestDatetime - timedelta(microseconds=earliestDatetime.microsecond, seconds=earliestDatetime.second) -%}
  {%- set earliestDatetimeMinute = earliestDatetime.minute -%}
  {%- set earliestDatetimeComp   = earliestDatetime - timedelta(minutes=earliestDatetime.minute, seconds=earliestDatetime.second) -%}
  {#- Validate and set durationTimedelta -#}
  {%- set minDuration            = defaultDurationMinNum if defaultDuration is number else 30 -%}
  {%- set durationTimedelta      = timedelta(minutes=minDuration) if durationTimedelta is not defined or durationTimedelta < timedelta(minutes=minDuration) else durationTimedelta -%}
  {%- set durationMinutes        = durationTimedelta.total_seconds() | int(minDuration * 60) // 60  -%}
  {%- set durationMinutesResidual= durationMinutes % 60 -%}
  {%- set durationHours          = (durationMinutes // 60) + (1 if durationMinutesResidual > 0 else 0) -%}

  {#-###################################-#}
  {#- Validate and set latestDatetime -#}
  {%- set defPeriodeHours        = defaultPeriodHrsNum if defaultPeriodHrsNum is number else 48 -%}
  {%- set latestDatetime         = nowTime + timedelta(hours=defPeriodeHours) if latestDatetime is not defined or latestDatetime is not datetime or latestDatetime < earliestDatetime else latestDatetime -%}
  {#- Strip microseconds from time -#}
  {%- set latestDatetime         = latestDatetime - timedelta(microseconds=latestDatetime.microsecond) -%}
  {%- set latestDatetimeMinut    = latestDatetime.minute -%}
  {%- set latestDatetime         = latestDatetime + timedelta(minutes=0 if latestDatetimeMinut == 0 else 60-latestDatetimeMinut, seconds=-latestDatetime.second) -%}
  {#- 
     Extend latestDatetime in case a duration is provided that exceeds the provided latestDatetime
     Note: latestDatetime is only extended by as many minutes as the window is exceeded with
  -#}
  {%- set durationDiff           = durationMinutes - (latestDatetime - earliestDatetime).total_seconds() // 60 -%}
  {%- set durationDiff           = 0 if durationDiff < 0 else durationDiff -%}
  {%- set latestDatetime         = latestDatetime + timedelta(minutes=0 if durationDiff <= 0 else durationDiff) -%}
  {#%- set latestDatetimeComp     = (latestDatetime - timedelta(hours=durationHours + (1 if durationMinutesResidual > 0 else 0))) -%#}
  {%- set mode                   = mode | lower -%}
  {%- if mode not in (
                        "full",
                        "cheapPrice", "cheapStart", "cheapStart", "isCheapNow", 
                        "expensivePrice", "expensiveStart", "expensiveStart", "isExpensiveNow"
                      ) -%}
    {%- set mode = "full" -%}
  {% endif %}

  {#- Blank out unwanted date sets. Order is today -> tomorrow -> forecast. If a set is blanked out, subsequent set(s) are also be blanked out -#}
  {%- if attr_today_arr=="" -%}
    {%- set attr_tomorrow_arr = "" -%}
  {%- endif -%}
  {%- if attr_tomorrow_arr=="" -%}
    {%- set attr_forecast_arr = "" -%}
  {%- endif -%}
  {#- Retrieve energy prices
      If, under 'strict' time adherence, where the provided latestDatetime is in the past, return a null price set -#}
  {%- set validTime = (timeAdherenceStr != "strict") or ( (timeAdherenceStr == "strict") and (latestDatetime >= now()) ) -%}
  {%- if mySensor_today is defined and mySensor_today != "" and validTime -%} 
    {%- set raw_today     = state_attr(mySensor_today, attr_today_arr) -%}
    {%- set raw_tomorrow  = state_attr(mySensor_tomorrow, attr_tomorrow_arr) -%}
    {%- set forecast      = state_attr(mySensor_forecast, attr_forecast_arr) -%}
    {%- set prices        = (raw_today if raw_today else []) + (raw_tomorrow if raw_tomorrow else []) + (forecast if forecast else []) -%}
    {%- set arrSize       = prices | length -%}
    {%- set prices_len    = arrSize - durationHours | int + 1 -%}
  {%- else -%}
    {%- set prices_len    = 0 -%}
  {%- endif -%}
 
  {#-####################################################################-#}
  {#- Set result name spaces -#}
  {%- set resultCheap     = namespace(pricing=9999, priceStartTime=None) -%}
  {%- set resultExpensive = namespace(pricing=0,    priceStartTime=None) -%}

  {#-####################################################################-#}
  {#- Only run if we have price data -#}
  {%- if prices_len > 0 and timeTagStr in prices[0] -%}
    {#- Do not allow latestDatetime to be after last price available makes no sense -#}
    {%- set tmp = prices[arrSize-1][timeTagStr] + timedelta(minutes=60) -%}
    {%- if latestDatetime > tmp -%}
      {%- set latestDatetime = tmp -%}
    {%- endif -%}
    
    {#-####################################################################-#}
    {#-
       Calculate cheapest period for the current hour and all consecutive hours
       Note: This will take the current hour into account thus providingg a calculation for now() + duration,
             as well at calculation placed at the end of a hour
    -#}
    {# Loop all timeslot where a pricing exists #}
    {%- for n in range(prices_len) -%}
      {# Calculat pricing on the hour, at the current minute number as well as at the end of an hour #}
      {%- set loopSet = [0,earliestDatetimeMinute] -%}
      {%- if durationMinutesResidual != 0 -%}
        {%- set loopSet = loopSet + [60 - durationMinutesResidual] -%}
      {%- endif -%}
      {# Iterate through the possible minute sets #}      
      {%- for v in range(loopSet | length) -%}
        {%- set priceStartTime     = prices[n][timeTagStr] + timedelta(minutes=loopSet[v]) -%}
        {%- if earliestDatetimeComp <= priceStartTime -%}
          {#-####################################################################-#}
          {#- Only do the calculation for price data that falls within the relevant timespan -#}
          {%- set pricing       = namespace(value=0) -%}
          {%- set timeResidual  = durationMinutes -%}
          {%- set workMin       = 60 - loopSet[v] -%}
          {%- set workMin       = workMin if durationMinutes > workMin else durationMinutes -%}
          {%- set pricing.value = pricing.value + prices[n][priceTagStr] * (workMin / 60) -%}
          {%- set timeResidual  = timeResidual - workMin -%}
		  
          {%- set priceStartTime = priceStartTime - timedelta(minutes=0 if durationDiff<=0 else 60-durationDiff) -%}
          {%- if (priceStartTime>=earliestDatetime) and (priceStartTime + timedelta(minutes=durationMinutes)<=latestDatetime) -%}
            {%- for i in range(durationHours) -%}
              {%- if n+i+1<arrSize -%}
                {%- set workMin       = 60 if (timeResidual - i * 60) > 60 else (timeResidual  - i * 60) if (timeResidual  - i * 60)>0 else 0 -%}
                {%- set pricing.value = pricing.value + prices[n+i+1][priceTagStr] * (workMin / 60) -%}
              {%- endif -%}
            {%- endfor -%}

            {#-####################################################################-#}
            {%- if (pricing.value<resultCheap.pricing or
                   (returnFirstBool and pricing.value<=resultCheap.pricing and priceStartTime<resultCheap.priceStartTime) or
                   (not returnFirstBool and pricing.value<=resultCheap.pricing and priceStartTime>resultCheap.priceStartTime)
                   ) -%}
              {%- set resultCheap.pricing        = pricing.value -%}
              {%- set resultCheap.priceStartTime = priceStartTime -%}
            {%- endif -%}
            {%- if (pricing.value>resultExpensive.pricing or
                   (returnFirstBool and pricing.value>=resultExpensive.pricing and priceStartTime<resultExpensive.priceStartTime) or
                   (not returnFirstBool and pricing.value>=resultExpensive.pricing and priceStartTime>resultExpensive.priceStartTime)
                   ) -%}
              {%- set resultExpensive.pricing        = pricing.value -%}
              {%- set resultExpensive.priceStartTime = priceStartTime -%}
            {%- endif -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
    {%- endfor -%}
  {%- endif -%}

  {#-####################################################################-#}
  {#- Output result as a string formatted as JSON - this can then be parsed by whatever called the macro -#}
  {%- set FinalCheapDict     = dict(cheapPrice=none)      if resultCheap.pricing     == 9999 or resultCheap.priceStartTime    ==None else dict(cheapPriceStartTime    =resultCheap.priceStartTime    |string, cheapPrice    =resultCheap.pricing    |round(4)) -%}
  {%- set FinalExpensiveDict = dict(expensivePrice=none) if resultExpensive.pricing == 9999 or resultExpensive.priceStartTime==None else dict(expensivePriceStartTime=resultExpensive.priceStartTime|string, expensivePrice=resultExpensive.pricing|round(4)) -%}
  {%- set HintDict = dict() if hint == "" else dict(hint = hint) -%}
  {%- set result = dict(
          FinalCheapDict | items | list + FinalExpensiveDict | items | list + HintDict | items | list, 
          earliestDatetime= earliestDatetime|string, 
          latestDatetime  = latestDatetime|string, 
          duration        = durationMinutes|round(0),
          isCheapNow      = none if FinalCheapDict.cheapPrice        ==none else now() | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M') == FinalCheapDict.cheapPriceStartTime         | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M'),
          isExpensiveNow  = none if FinalExpensiveDict.expensivePrice==none else now() | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M') == FinalExpensiveDict.expensivePriceStartTime | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M'),
          mode=mode
        ) -%}
  {%- if mode == "cheapPrice" -%}
    {{- result.cheapPrice -}}
  {%- elif mode == "cheapStart" -%}
    {{- (result.cheapPriceStartTime if result.cheapPrice != none else none) | trim -}}
  {%- elif mode == "cheapStart" -%}
    {{- result.cheapPriceEndTime if result.cheapPrice != none else none -}}
  {%- elif mode == "isCheapNow" -%}
    {{- result.isCheapNow -}}
  {%- elif mode == "expensivePrice" -%}
    {{- result.expensivePrice -}}
  {%- elif mode == "expensiveStart" -%}
    {{- result.expensivePriceStartTime if result.expensivePrice != none else none -}}
  {%- elif mode == "expensiveStart" -%}
    {{- result.expensivePriceEndTime if result.expensivePrice != none else none -}}
  {%- elif mode == "isExpensiveNow" -%}
    {{- result.isExpensiveNow -}}
  {%- else -%}
    {{- result | to_json -}}
  {%- endif -%}
{%- endmacro -%}
